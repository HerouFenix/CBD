// NMEC: 89348

#1
// Liste todos os documentos da coleção.
db.rest.find()

#2
// Apresente os campos restaurant_id, nome, localidade e gastronomia para todos os documentos da coleção.
db.rest.find({}, {restaurant_id: 1, nome: 1, gastronomia: 1, localidade: 1})

#3
// Apresente os campos restaurant_id, nome, localidade e código postal (zipcode), mas exclua o campo _id de todos os documentos da coleção.
db.rest.find({}, {_id: 0, restaurant_id: 1, nome: 1, localidade: 1, 'address.zipcode': 1})

#4 
//Indique o total de restaurantes localizados no Bronx.
db.rest.aggregate([{$match: {localidade: {$eq: 'Bronx'}}},{$count: "No of Restaurants in Bronx"}])
//309

#5 
//Apresente os primeiros 5 restaurantes localizados no Bronx.
db.rest.find( { localidade: { $eq: 'Bronx' }} ).limit(5)

#6 
//Liste todos os restaurantes que tenham pelo menos um score superior a 85.
db.rest.find({'grades.score' : {$gt: 85}})

#7
//Encontre os restaurantes que obtiveram uma ou mais pontuações (score) entre [80 e 100].
db.rest.find({$and: [{'grades.score' : {$gte: 80}},{'grades.score': {$lte: 100}}]})
//NOTA: Dizer ao stor, somewhy o AND nao esta a funcionar como devia, i.e, deu como output um restaurante que nao tem nenhum score no range

#8
//Indique os restaurantes com latitude inferior a -95,7.
db.rest.find({"address.coord.0": {$lt: -97.5}})

#9
//Indique os restaurantes que não têm gastronomia "American", tiveram uma (ou mais) pontuação superior a 70 e estão numa latitude inferior a -65.
db.rest.find({gastronomia: {$ne: "American"}, 'grades.score': {$gt: 70}, 'address.coord.0': {$lt: -65}})

#10
//Liste o restaurant_id, o nome, a localidade e gastronomia dos restaurantes cujo nome começam por "Wil".
db.rest.find({nome: {$regex: 'Wil*'}}, {restaurant_id: 1,nome: 1, localidade: 1, gastronomia: 1})

#11
// Liste o nome, a localidade e a gastronomia dos restaurantes que pertencem ao Bronx e cuja gastronomia é do tipo "American" ou "Chinese".
db.rest.find({ localidade: { $eq: 'Bronx' }, $or: [{gastronomia: { $eq: 'American' }},{gastronomia: { $eq: 'Chinese' }}]}, {nome: 1, localidade: 1, gastronomia: 1})

#12
//Liste o restaurant_id, o nome, a localidade e a gastronomia dos restaurantes localizados em "Staten Island", "Queens", "Bronx" ou "Brooklyn".
db.rest.find({$or: [{localidade: { $eq: 'Bronx' }}, {localidade: { $eq: 'Queens' }}, {localidade: { $eq: 'Staten Island' }}, {localidade: { $eq: 'Brooklyn' }}]}, {nome: 1, restaurant_id: 1, gastronomia:1, localidade: 1})

#13
//Liste o nome, a localidade, o score e gastronomia dos restaurantes que alcançaram sempre pontuações inferiores ou igual a 3.
db.rest.find({'grades.score': {$not: {$gt: 3}}},{nome: 1, 'grades.score': 1, gastronomia:1, localidade: 1})

#14
//Liste o nome e as avaliações dos restaurantes que obtiveram uma avaliação com um grade "A", um score 10 na data "2014-08-11T00: 00: 00Z" (ISODATE).
db.rest.find({'grades': {'$elemMatch': {grade: 'A', score: 10, date: ISODate("2014-08-11T00:00:00Z")}}},{'grades.grade': 1, nome: 1})

#15
//Liste o restaurant_id, o nome e os score dos restaurantes nos quais a segunda avaliação foi grade "A" e ocorreu em ISODATE "2014-08-11T00: 00: 00Z".
db.rest.find({'grades.1.grade': {$eq: 'A'}, 'grades.1.date': {$eq: ISODate("2014-08-11T00:00:00Z")}},{restaurant_id: 1, nome: 1, 'grades.score': 1})

#16
//Liste o restaurant_id, o nome, o endereço (address) e as coordenadas geográficas (coord) dos restaurantes onde o 2o elemento da matriz de coordenadas tem um valor superior a 42 e inferior ou igual a 52.
db.rest.find({$and: [{'address.coord.1': {$gt:42}},{'address.coord.1': {$lte:52}}]},{restaurant_id: 1, address: 1, nome: 1})

#17
//Liste o nome de todos os restaurantes por ordem crescente.
db.rest.find({},{nome: 1}).sort({nome: 1})

#18
//Liste nome, gastronomia e localidade de todos os restaurantes ordenando por ordem crescente da gastronomia e, em segundo, por ordem decrescente de localidade.
db.rest.find({},{nome: 1,gastronomia: 1, localidade: 1}).sort({gastronomia: 1, localidade: -1})

#19
//Liste nome, localidade, grade e gastronomia de todos os restaurantes localizados em Brooklyn que não incluem gastronomia "American" e obtiveram uma classificação (grade) "A". Deve apresentá-los por ordem decrescente de gastronomia.
db.rest.find({localidade: 'Brooklyn', gastronomia: {$ne: 'American'}},{nome: 1, localidade: 1, 'grades.grade': 1, gastronomia: 1}).sort({gastronomia: -1})

#20
//Conte o total de restaurante existentes em cada localidade.
db.rest.aggregate([{$group : { _id : '$localidade', no_restaurants : {$sum : 1}}}])

#21
//Liste todos os restaurantes cuja média dos score é superior a 30.
db.rest.aggregate([{$addFields : { average_score :  {$avg : '$grades.score'}}}, {$match : {average_score: {$gt: 30}}}])
//Note the usage of pipeline stages, first to get the average score and then to use it as a comparasion

#22
//Indique os restaurantes que têm gastronomia "American", o somatório de score é superior a 70 e estão numa latitude inferior a -65.
db.rest.aggregate([{$addFields : { total_score :  {$sum : '$grades.score'}}}, {$match : {total_score: {$gt: 70}, gastronomia: 'American', 'address.coord.0': {$lt: -65}}}])

#23
//Apresente uma lista com todos os tipos de gastronomia e o respetivo número de restaurantes, ordenada por ordem decrescente deste número.
db.rest.aggregate([{$group : { _id : '$gastronomia', no_restaurants : {$sum : 1}}}, {$sort: {no_restaurants: -1}}])

#24
//Apresente o número de gastronomias diferentes na rua "Flatbush Avenue"
db.rest.aggregate([{$match: {'address.rua': 'Flatbush Avenue'}},{$group: {'_id': '$gastronomia'}},{$count: "no_gastronomy"}])
// 9

#25
// Conte quantos restaurantes existem por rua e ordene por ordem decrescente
db.rest.aggregate([{$group : { _id : '$address.rua', no_restaurants : {$sum : 1}}}, {$sort: {no_restaurants: -1}}])

#26
// Quantos restaurantes italianos existem na Broadway?
db.rest.aggregate([{$match: {gastronomia: 'Italian', 'address.rua': 'Broadway'}},{$count: 'no_restaurants'}])
// 6

#27
// Liste o nome e score total de todos os restaurantes de comida Indiana com um score total menor que 15. 
db.rest.aggregate([{$addFields: {total_score: {$sum: '$grades.score'}}}, {$match: {'gastronomia': 'Indian', 'total_score': {$lt: 15}}}, {$group: {_id: '$_id', nome: {'$first': '$nome'}, 'total_score': {'$first': '$total_score'}}}])


#28
// Quantos restaurantes possuem 'Restaurant' no nome?
db.rest.aggregate([{$match: {nome: {$regex: 'Restaurant*'}}},{$count: 'no_restaurants'}])
//561

#29
// Indique qual a gastronomia mais comum
db.rest.aggregate([{$group : { _id : '$gastronomia', no_restaurants : {$sum : 1}}}, {$sort: {no_restaurants: -1}}, {$limit: 1}])
//American

#30
// Indique o score médio total de todos os restaurantes
db.rest.aggregate([{$addFields : { average_score :  {$avg : '$grades.score'}}}, {$group : {_id:null, average_score :  {$avg : '$average_score'}}}])
//+-11.17
